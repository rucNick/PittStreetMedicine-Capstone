name: Backend CI/CD for Cloud Run

on:
  push:
    branches:
      - main
    paths:
      - 'src/Backend/**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/Backend/**'
  workflow_dispatch:

env:
  PROJECT_ID: streetmedgo
  SERVICE_NAME: streetmed-backend
  REGION: us-central1
  MYSQL_INSTANCE: streetmedgo:us-central1:streetmed
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: streetmedgo-repo
  CORS_ALLOWED_ORIGINS: "https://streetmed-frontend-900663028964.us-central1.run.app,http://localhost:3000,https://app.ruicao.info,https://app.streetmedatpitt.org"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
        
      - name: Build with Maven
        run: cd src/Backend && mvn clean package -DskipTests

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
        
      - name: Build with Maven
        run: cd src/Backend && mvn clean package -DskipTests
      
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
          
      - name: Build and Push Docker image
        run: |
          cd src/Backend
          
          # Create improved Dockerfile
          cat > Dockerfile << 'EOF'
          FROM eclipse-temurin:17-jdk-focal
          
          WORKDIR /app
          
          # Copy the JAR file
          COPY target/*.jar app.jar
          
          # Explicitly expose port 8080
          EXPOSE 8080
          
          # Set environment variable
          ENV PORT=8080
          
          # Define the entrypoint with explicit port and host binding
          ENTRYPOINT ["java", "-Dserver.port=8080", "-Dserver.address=0.0.0.0", "-jar", "/app/app.jar"]
          EOF
          
          # Build and push to Artifact Registry
          IMAGE_PATH="${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}"
          
          # Build with platform specification for compatibility and load into Docker
          docker buildx create --use
          docker buildx build --platform linux/amd64 --load -t ${IMAGE_PATH}:${{ github.sha }} -t ${IMAGE_PATH}:latest .
          
          # Push the images to Artifact Registry
          docker push ${IMAGE_PATH}:${{ github.sha }}
          docker push ${IMAGE_PATH}:latest
          
      - name: Deploy to Cloud Run
        id: deploy
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --add-cloudsql-instances ${{ env.MYSQL_INSTANCE }} \
            --min-instances=1 \
            --no-cpu-throttling \
            --cpu=1 \
            --memory=1Gi \
            --port=8080 \
            --timeout=600s \
            --startup-cpu-boost \
            --set-env-vars CORS_ALLOWED_ORIGINS=${{ env.CORS_ALLOWED_ORIGINS }} \
            --allow-unauthenticated
          
      - name: Show Backend URL
        run: |
          BACKEND_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "Backend URL: $BACKEND_URL"
          echo "Backend successfully deployed to Cloud Run with always-on instances"

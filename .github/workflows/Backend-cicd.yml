name: Backend CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'src/Backend/**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/Backend/**'
  workflow_dispatch:

env:
  PROJECT_ID: streetmedgo
  SERVICE_NAME: streetmed-backend
  REGION: us-central1
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: streetmedgo-repo
  FRONTEND_SERVICE_ACCOUNT: frontend-identity@streetmedgo.iam.gserviceaccount.com

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Run backend tests
      run: cd src/Backend && mvn test
      
    - name: Build with Maven
      run: cd src/Backend && mvn clean package -DskipTests

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: cd src/Backend && mvn clean package -DskipTests
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
    
    - name: Build and Push Docker image to Artifact Registry
      run: |
        cd src/Backend
        
        # Create Dockerfile if it doesn't exist
        if [ ! -f Dockerfile ]; then
          echo "FROM eclipse-temurin:17-jre" > Dockerfile
          echo "WORKDIR /app" >> Dockerfile
          echo "COPY target/*.jar app.jar" >> Dockerfile
          echo "EXPOSE 8080" >> Dockerfile
          echo "ENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]" >> Dockerfile
        fi
        
        # Build and push to Artifact Registry
        IMAGE_PATH="${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}"
        docker build -t ${IMAGE_PATH}:${{ github.sha }} -t ${IMAGE_PATH}:latest .
        docker push ${IMAGE_PATH}:${{ github.sha }}
        docker push ${IMAGE_PATH}:latest
    
    # Create a service account for the backend if it doesn't exist
    - name: Create or use backend service account
      run: |
        SERVICE_ACCOUNT=backend-identity
        # Check if service account exists
        if ! gcloud iam service-accounts describe ${SERVICE_ACCOUNT}@${{ env.PROJECT_ID }}.iam.gserviceaccount.com --quiet; then
          echo "Creating service account $SERVICE_ACCOUNT"
          gcloud iam service-accounts create $SERVICE_ACCOUNT \
            --display-name "Service identity for Backend service"
        else
          echo "Service account $SERVICE_ACCOUNT already exists"
        fi
    
    # Deploy to Cloud Run with no-allow-unauthenticated flag
    - name: Deploy to Cloud Run (Private)
      id: deploy
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
        --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
        --region ${{ env.REGION }} \
        --service-account=backend-identity@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
        --no-allow-unauthenticated \
        --set-env-vars=CORS_ALLOWED_ORIGINS=https://streetmed-frontend-l376e2l63q-uc.a.run.app
    
    # Grant the frontend service account permission to invoke the backend
    - name: Grant frontend service account permission to invoke backend
      run: |
        gcloud run services add-iam-policy-binding ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --member=serviceAccount:${{ env.FRONTEND_SERVICE_ACCOUNT }} \
          --role=roles/run.invoker
    
    - name: Show Backend URL
      run: |
        BACKEND_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format='value(status.url)')
        echo "Backend URL: $BACKEND_URL"
        echo "Important: The backend is now private and can only be accessed from authorized services like the frontend."

name: Backend CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'src/Backend/**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/Backend/**'
  workflow_dispatch:

env:
  PROJECT_ID: streetmedgo
  SERVICE_NAME: streetmed-backend
  REGION: us-central1
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: streetmedgo-repo
  FRONTEND_SERVICE_ACCOUNT: frontend-identity@streetmedgo.iam.gserviceaccount.com
  MYSQL_INSTANCE: streetmedgo:us-central1:streetmed
  MYSQL_HOST: 130.211.230.52

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven (skipping tests for now)
      run: cd src/Backend && mvn clean package -DskipTests

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: cd src/Backend && mvn clean package -DskipTests
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
    
    # Create Dockerfile for MySQL deployment
    - name: Create Dockerfile for MySQL
      run: |
        cd src/Backend
        
        # Create Dockerfile for MySQL connection
        cat > Dockerfile << 'EOF'
        FROM eclipse-temurin:17-jre
        
        WORKDIR /app
        
        # Copy the application JAR
        COPY target/*.jar app.jar
        
        EXPOSE 8080
        
        # Start the application with MySQL connection and production profile
        ENTRYPOINT ["java", "-Dspring.profiles.active=prod", "-jar", "app.jar"]
        EOF
        
        # Build and push to Artifact Registry
        IMAGE_PATH="${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}"
        docker build -t ${IMAGE_PATH}:${{ github.sha }} -t ${IMAGE_PATH}:latest .
        docker push ${IMAGE_PATH}:${{ github.sha }}
        docker push ${IMAGE_PATH}:latest
    
    # Create or update secrets for database access
    - name: Setup MySQL credentials as secrets
      run: |
        # Create secrets for MySQL credentials if they don't exist yet
        if ! gcloud secrets describe mysql-username 2>/dev/null; then
          echo "Creating MySQL username secret"
          echo "${{ secrets.MYSQL_USERNAME }}" | gcloud secrets create mysql-username --data-file=-
        fi
        
        if ! gcloud secrets describe mysql-password 2>/dev/null; then
          echo "Creating MySQL password secret"
          echo "${{ secrets.MYSQL_PASSWORD }}" | gcloud secrets create mysql-password --data-file=-
        fi
    
    # Create a service account for the backend if it doesn't exist
    - name: Create or use backend service account
      run: |
        SERVICE_ACCOUNT=backend-identity
        # Check if service account exists
        if ! gcloud iam service-accounts describe ${SERVICE_ACCOUNT}@${{ env.PROJECT_ID }}.iam.gserviceaccount.com --quiet; then
          echo "Creating service account $SERVICE_ACCOUNT"
          gcloud iam service-accounts create $SERVICE_ACCOUNT \
            --display-name "Service identity for Backend service"
        else
          echo "Service account $SERVICE_ACCOUNT already exists"
        fi
    
    # Deploy to Cloud Run with MySQL connection
    - name: Deploy to Cloud Run (No auth required)
      id: deploy
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --service-account=backend-identity@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
          --allow-unauthenticated \
          --set-env-vars="CORS_ALLOWED_ORIGINS=https://streetmed-frontend-l376e2l63q-uc.a.run.app" \
          --set-secrets="MYSQL_USERNAME=mysql-username:latest" \
          --set-secrets="MYSQL_PASSWORD=mysql-password:latest" \
          --set-env-vars="SPRING_PROFILES_ACTIVE=prod"
    
    - name: Show Backend URL
      run: |
        BACKEND_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format='value(status.url)')
        echo "Backend URL: $BACKEND_URL"
        echo "IMPORTANT: Your backend is now connected to the MySQL database at ${{ env.MYSQL_HOST }}."
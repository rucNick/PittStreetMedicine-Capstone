name: Backend CI/CD for Cloud Run

on:
  push:
    branches:
      - main
    paths:
      - 'src/Backend/**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/Backend/**'
  workflow_dispatch:

env:
  PROJECT_ID: streetmedgo
  SERVICE_NAME: streetmed-backend
  REGION: us-central1
  MYSQL_INSTANCE: streetmedgo:us-central1:streetmed
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: streetmed-backend

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: cd src/Backend && mvn clean package -DskipTests

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: cd src/Backend && mvn clean package -DskipTests
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Enable required APIs
      run: |
        # Enable required APIs
        gcloud services enable run.googleapis.com --quiet || true
        gcloud services enable cloudbuild.googleapis.com --quiet || true
        gcloud services enable sqladmin.googleapis.com --quiet || true
        gcloud services enable artifactregistry.googleapis.com --quiet || true
        gcloud services enable vpcaccess.googleapis.com --quiet || true
        
        # Wait a bit for API enablement to propagate
        echo "Waiting for API enablement to propagate..."
        sleep 60
    
    - name: Create Artifact Registry repository if not exists
      run: |
        # Check if repository exists
        if ! gcloud artifacts repositories describe ${{ env.REPOSITORY }} --location=${{ env.REGION }} 2>/dev/null; then
          echo "Creating repository ${{ env.REPOSITORY }} in ${{ env.REGION }}"
          gcloud artifacts repositories create ${{ env.REPOSITORY }} \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="Repository for ${{ env.SERVICE_NAME }}" \
            --async
          
          # Wait a moment for repository creation to propagate
          sleep 30
        fi
    
    - name: Create Dockerfile for Spring Boot
      run: |
        cd src/Backend
        
        # Create Dockerfile
        cat > Dockerfile << 'EOF'
        FROM eclipse-temurin:17-jdk-focal
        
        WORKDIR /app
        
        COPY target/*.jar app.jar
        
        ENV SPRING_PROFILES_ACTIVE=prod
        ENV CORS_ALLOWED_ORIGINS=https://streetmed-frontend-l376e2l63q-uc.a.run.app,https://streetmed-frontend-900663028964.us-central1.run.app,http://localhost:3000,https://app.streetmedatpitt.org,https://app.ruicao.info
        ENV SERVER_PORT=8080
        
        EXPOSE 8080
        
        # Be more explicit about the Java options
        ENTRYPOINT ["java", "-Dserver.port=8080", "-jar", "/app/app.jar"]
        EOF
    
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
    
    - name: Build and Push Docker image
      run: |
        cd src/Backend
        IMAGE_PATH="${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}"
        docker build -t ${IMAGE_PATH}:${{ github.sha }} -t ${IMAGE_PATH}:latest .
        docker push ${IMAGE_PATH}:${{ github.sha }}
        docker push ${IMAGE_PATH}:latest
    
    - name: Create Cloud SQL connection
      run: |
        # Create or update Cloud SQL connection
        gcloud compute networks vpc-access connectors create streetmed-sql-connector \
          --region=${{ env.REGION }} \
          --network=default \
          --range=10.8.0.0/28 \
          --min-instances=2 \
          --max-instances=10 || true
    
    - name: Deploy to Cloud Run
      id: deploy
      run: |
        # Create an env.yaml file for environment variables
        cat > env.yaml << EOF
        SPRING_PROFILES_ACTIVE: "prod"
        CORS_ALLOWED_ORIGINS: "https://streetmed-frontend-l376e2l63q-uc.a.run.app,https://streetmed-frontend-900663028964.us-central1.run.app,http://localhost:3000,https://app.streetmedatpitt.org,https://app.ruicao.info"
        SERVER_PORT: "8080"
        SPRING_CLOUD_GCP_SQL_INSTANCE_CONNECTION_NAME: "${{ env.MYSQL_INSTANCE }}"
        EOF
        
        # Deploy with increased startup time and health check
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --service-account=backend-identity@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
          --add-cloudsql-instances ${{ env.MYSQL_INSTANCE }} \
          --vpc-connector streetmed-sql-connector \
          --min-instances=1 \
          --no-cpu-throttling \
          --concurrency=80 \
          --cpu=1 \
          --memory=1Gi \
          --port=8080 \
          --timeout=300s \
          --env-vars-file env.yaml \
          --allow-unauthenticated \
          --startup-cpu-boost \
          --max-instances=10
    
    - name: Configure IAM permissions
      run: |
        # Grant invoker role to frontend service account
        gcloud run services add-iam-policy-binding ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --member="serviceAccount:frontend-identity@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" \
          --role="roles/run.invoker"
    
    - name: Show Backend URL
      run: |
        BACKEND_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format='value(status.url)')
        echo "Backend URL: $BACKEND_URL"
        echo "Backend successfully deployed to Cloud Run with Cloud SQL connectivity"
        echo "Cloud SQL Instance: ${{ env.MYSQL_INSTANCE }}"
        
        # Save this URL for future reference
        echo "backend_url=$BACKEND_URL" >> $GITHUB_OUTPUT
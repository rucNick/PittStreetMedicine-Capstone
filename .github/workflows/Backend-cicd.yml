name: Backend CI/CD
  
on:
  push:
    branches:
      - main
    paths:
      - 'src/Backend/**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/Backend/**'
  workflow_dispatch:

env:
  PROJECT_ID: streetmedgo
  SERVICE_NAME: streetmed-backend
  REGION: us-central1
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev
  REPOSITORY: streetmedgo-repo
  FRONTEND_SERVICE_ACCOUNT: frontend-identity@streetmedgo.iam.gserviceaccount.com

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Run backend tests
      run: cd src/Backend && mvn test
      
    - name: Build with Maven
      run: cd src/Backend && mvn clean package -DskipTests

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: cd src/Backend && mvn clean package -DskipTests
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_BACK }}
    
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY }}
    
    - name: Build and Deploy using Cloud Build
      run: |
        cd src/Backend
        
        # Create Dockerfile if it doesn't exist
        if [ ! -f Dockerfile ]; then
          echo "FROM eclipse-temurin:17-jre" > Dockerfile
          echo "WORKDIR /app" >> Dockerfile
          echo "COPY target/*.jar app.jar" >> Dockerfile
          echo "EXPOSE 8080" >> Dockerfile
          echo "ENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]" >> Dockerfile
        fi
        
        # Create a Cloud Build config file
        cat > cloudbuild.yaml << EOF
        steps:
        - name: 'gcr.io/cloud-builders/docker'
          args: ['build', '-t', '${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY}/${SERVICE_NAME}:${GITHUB_SHA}', '.']
        - name: 'gcr.io/cloud-builders/docker'
          args: ['tag', '${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY}/${SERVICE_NAME}:${GITHUB_SHA}', '${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY}/${SERVICE_NAME}:latest']
        images:
        - '${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY}/${SERVICE_NAME}:${GITHUB_SHA}'
        - '${ARTIFACT_REGISTRY}/${PROJECT_ID}/${REPOSITORY}/${SERVICE_NAME}:latest'
        EOF
        
        # Submit the build to Cloud Build
        gcloud builds submit --config=cloudbuild.yaml .
    
    # Check if backend service account exists
    - name: Check backend service account
      run: |
        SERVICE_ACCOUNT=backend-identity
        # Check if service account exists
        if ! gcloud iam service-accounts describe ${SERVICE_ACCOUNT}@${{ env.PROJECT_ID }}.iam.gserviceaccount.com --quiet; then
          echo "Warning: Service account $SERVICE_ACCOUNT doesn't exist. Please create it manually."
          echo "Run: gcloud iam service-accounts create $SERVICE_ACCOUNT --display-name \"Service identity for Backend service\""
          exit 1
        else
          echo "Service account $SERVICE_ACCOUNT exists, proceeding with deployment"
        fi
    
    # Deploy to Cloud Run with no-allow-unauthenticated flag
    - name: Deploy to Cloud Run (Private)
      id: deploy
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --region ${{ env.REGION }} \
          --service-account=backend-identity@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
          --no-allow-unauthenticated
    
    # Grant the frontend service account permission to invoke the backend
    - name: Grant frontend service account permission to invoke backend
      run: |
        gcloud run services add-iam-policy-binding ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --member=serviceAccount:${{ env.FRONTEND_SERVICE_ACCOUNT }} \
          --role=roles/run.invoker
    
    - name: Show Backend URL
      run: |
        BACKEND_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format='value(status.url)')
        echo "Backend URL: $BACKEND_URL"
        echo "Important: The backend is now private and can only be accessed from authorized services like the frontend."